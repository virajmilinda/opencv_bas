import cv2
import numpy as np
import time
import csv

# Define function for preprocessing image
def preprocess_image(img, thresh_1=50, thresh_2=150):
    # Convert to LAB color space and split channels
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    
    # Use adaptive thresholding on the L channel
    adaptive_thresh = cv2.adaptiveThreshold(l, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                            cv2.THRESH_BINARY, 11, 2)
    
    # Invert the binary image to make the object white
    adaptive_thresh = cv2.bitwise_not(adaptive_thresh)
    
    return adaptive_thresh

# Define function to find contours, measure dimensions, and get colors
def measure_objects(img, original_img, min_contour_area=500):
    contours, _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    dimensions_colors = []
    for contour in contours:
        if cv2.contourArea(contour) > min_contour_area:
            x, y, w, h = cv2.boundingRect(contour)
            object_roi = original_img[y:y+h, x:x+w]
            dominant_color = get_dominant_color(object_roi)
            dimensions_colors.append((x, y, w, h, dominant_color))
    return dimensions_colors

# Define function to get the dominant color of an ROI
def get_dominant_color(roi):
    pixels = np.float32(roi.reshape(-1, 3))
    n_colors = 1
    _, labels, palette = cv2.kmeans(pixels, n_colors, None,
                                    (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 0.2), 10,
                                    cv2.KMEANS_RANDOM_CENTERS)
    dominant_color = palette[np.argmax(np.bincount(labels.flatten()))]
    return dominant_color

# Define function to annotate dimensions and colors on frame
def annotate_frame(frame, dimensions_colors):
    for (x, y, w, h, color) in dimensions_colors:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.putText(frame, f'W:{w} H:{h}', (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        cv2.putText(frame, f'Color: ({int(color[2])}, {int(color[1])}, {int(color[0])})', (x, y + h + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

# Define function to save dimensions and colors to a file
def save_dimensions_to_file(dimensions_colors, filename='measurements.csv'):
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    with open(filename, mode='a', newline='') as file:
        writer = csv.writer(file)
        for (x, y, w, h, color) in dimensions_colors:
            writer.writerow([timestamp, x, y, w, h, int(color[0]), int(color[1]), int(color[2])])

# Capture video feed from webcam
vid_capture = cv2.VideoCapture(1)

# Create CSV file and write header
with open('measurements.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Timestamp', 'X', 'Y', 'Width', 'Height', 'Color B', 'Color G', 'Color R'])

last_saved_time = time.time()

if not vid_capture.isOpened():
    print("Error opening video feed")
else:
    while vid_capture.isOpened():
        ret, frame = vid_capture.read()
        if not ret:
            break
        
        preprocessed = preprocess_image(frame)
        dimensions_colors = measure_objects(preprocessed, frame)
        annotated_frame = frame.copy()
        annotate_frame(annotated_frame, dimensions_colors)
        
        # Concatenate original and annotated frames side by side
        side_by_side = np.concatenate((frame, annotated_frame), axis=1)
        
        cv2.imshow('Original and Processed Video Feed', side_by_side)
        
        save_dimensions_to_file(dimensions_colors)
        
        # Sleep for 0.1 seconds to achieve 10 measurements per second
        time.sleep(0.1)
        
        key = cv2.waitKey(1)
        if key == ord('q'):
            break

vid_capture.release()
cv2.destroyAllWindows()
